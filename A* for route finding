import heapq

def astar_search(start, goal, graph, heuristic):
    open_list = [(0, start, [])]
    
    while open_list:
        cost, current_node, path = heapq.heappop(open_list)
        path = path + [current_node]
        
        if current_node == goal:
            return path, cost
        
        for neighbor, edge_cost in graph.get(current_node, []):
            heapq.heappush(open_list, (cost + edge_cost + heuristic[neighbor], neighbor, path))
    
    return None

graph = {
    'A': [('B', 6), ('C', 3)],
    'B': [('D', 2), ('E', 4)],
    'C': [('F', 10)],
    'D': [('G', 4)],
    'E': [('G', 1)],
    'F': [('G', 2)]
}

heuristic = {
    'A': 7, 'B': 6, 'C': 5, 'D': 4, 'E': 3, 'F': 6, 'G': 0
}
start_node = 'A'
goal_node = 'G'

path, total_cost = astar_search(start_node, goal_node, graph, heuristic)

print("Least cost path from", start_node, "to", goal_node, "is", path)
print("Total cost:",Â total_cost)
