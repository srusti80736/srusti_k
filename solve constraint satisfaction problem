def print_board(board):
    for row in board:
        print(" ".join(row))
    print("\n")
 
def is_safe(board, row, col, N):
    for i in range(row):
        if board[i][col] == 'Q':
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if j < 0:
            break
        if board[i][j] == 'Q':
            return False
    for i, j in zip(range(row, -1, -1), range(col, N)):
        if j >= N:
            break
        if board[i][j] == 'Q':
            return False
 
    return True
 
def solve_n_queens_util(board, row, N):
    if row >= N:
        print_board(board)
        return True
    for col in range(N):
        if is_safe(board, row, col, N):
            board[row][col] = 'Q'
            if solve_n_queens_util(board, row + 1, N):
                return True
            board[row][col] = '.'
 
    return False
def solve_n_queens(N):
    board = [['.' for _ in range(N)] for _ in range(N)]
    if not solve_n_queens_util(board, 0, N):
        print("Solution does not exist")
    else:
        print("Solution found!")
N = 8 
solve_n_queens(N)
