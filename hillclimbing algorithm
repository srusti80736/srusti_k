import random
def objective_function(x):
   return -(x) ** 2 + 4*x 
def hill_climb(start_x, step_size=0.1, max_iterations=100):
   current_x = start_x
   current_value = objective_function(current_x)
   for _ in range(max_iterations):
       neighbors = [current_x + step_size, current_x - step_size]
       best_neighbor = max(neighbors, key=objective_function)
       best_neighbor_value = objective_function(best_neighbor)
       if best_neighbor_value > current_value:
           current_x, current_value = best_neighbor, best_neighbor_value
       else:
           break  
   return current_x, current_value
start_point = random.uniform(-10, 10) 
best_x, best_value = hill_climb(start_point)
print(f"Optimal x: {best_x:.4f}")
print(f"Optimal value: {best_value:.4f}")
